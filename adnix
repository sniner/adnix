#!/usr/bin/ruby
#
# Copyright (c) 2015, Stefan Schoenberger <stefan.schoenberger@gmail.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are those
# of the authors and should not be interpreted as representing official policies,
# either expressed or implied, of the FreeBSD Project.

#
# See also unbound-block-hosts by Gavin Brown, as this script has been inspired
# by his work (https://github.com/jodrell/unbound-block-hosts).
#

require 'optparse'
require 'net/http'

@opt = {
    # Addresses to resolve hosts to:
    address:    '127.0.0.1',
    v6address:  '::1',
    # Destination file name:
    file:       nil,
}

# Generic hosts list
class HostsList
    attr_reader :url

    def initialize(url)
        @url = url
    end

    def load
        res = Net::HTTP.get_response(URI(@url))
        raise "#{@url}: #{res.message}" unless res.is_a?(Net::HTTPSuccess)
        parse(res.body.split(/\r?\n/))
    end

    def parse(lines)
        lines.map do |line|
            case line
            when /^\s*(\d+\.\d+\.\d+\.\d+)\s+([\w\-\.]+)/
                {addr:$1, host:$2}
            end
        end.compact
    end
end

# Dan Pollock's ad blocking hosts list
class SomeonewhocaresList < HostsList
    def initialize
        super('http://someonewhocares.org/hosts/hosts')
    end

    def parse(lines)
        section = nil
        hosts = []

        lines.each do |line|
            case line.chomp
            when /^\s*\#<\/(.+?)>/
                section = nil
            when /^\s*\#<(.+?)>/
                section = $1.downcase
            when /^\s*(\d+\.\d+\.\d+\.\d+)\s+([\w\-\.]+)/
                hosts << {addr:$1, host:$2, section:section} if section
            end
        end

        hosts
    end
end

# Peter Lowe's ad blocking hosts list
class Yoyo < HostsList
    def initialize
        super('http://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&showintro=0&mimetype=plaintext')
    end
end

begin
    OptionParser.new do |opts|
        opts.banner = "Usage: #{File.basename($0)} [options]"

        opts.on("--file FILENAME", "Output file name (default: #{@opt[:file]||'stdout'})") do |f|
            @opt[:file] = f
        end

        opts.on("--address ADDR", "IPv4 address to resolve the hosts to (default: #{@opt[:address]})") do |a|
            @opt[:address] = a
        end

        opts.on("--v6address ADDR", "IPv6 address to resolve the hosts to (default: #{@opt[:v6address]})") do |a|
            @opt[:v6address] = a
        end
    end.parse!

    f = if @opt[:file] then File.open(@opt[:file], 'w') else $stdout end

    sources = {
        'Malware Domain List' => HostsList.new('http://www.malwaredomainlist.com/hostslist/hosts.txt'),
        'Dan Pollock' => SomeonewhocaresList.new,
        'Yoyo' => Yoyo.new,
    }

    hosts = sources.flat_map do |name, source|
        begin
            list = source.load.map {|item| item[:host]}
            $stderr.puts("INFO: #{name}: #{list.length} entries")
            list
        rescue => ex
            $stderr.puts("ERROR: #{ex}")
            []
        end
    end.sort.uniq
    $stderr.puts("INFO: Combined hosts list: #{hosts.length} entries")

    f.puts("server:")
    hosts.each do |host|
        f.puts("  local-zone: \"#{host}\" redirect")
        f.puts("  local-data: \"#{host} A #{@opt[:address]}\"")
        f.puts("  local-data: \"#{host} AAAA #{@opt[:v6address]}\"")
    end

rescue => ex
    $stderr.puts("ERROR: #{ex}")
ensure
    f.close unless f==$stdout
end

# vim: sw=4 ts=4 et: