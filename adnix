#!/usr/bin/ruby
#
# Copyright (c) 2015, Stefan Schoenberger <stefan.schoenberger@gmail.com>
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer. 
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# The views and conclusions contained in the software and documentation are those
# of the authors and should not be interpreted as representing official policies, 
# either expressed or implied, of the FreeBSD Project.

#
# See also unbound-block-hosts by Gavin Brown, as this script has been inspired
# by his work (https://github.com/jodrell/unbound-block-hosts).
#

require 'optparse'
require 'net/http'

@opt = {
    # Addresses to resolve the hosts to:
    address:                    '127.0.0.1',
    v6address:                  '::1',

    # Destination file name:
    file:                       nil,

    # Section filter for Dan Pollock's hosts list:
    someonewhocares_filter: {
        '2o7-sites'             => true,
        'ad-sitesi'             => true,
        'belo-interactive-sites'=> true,
        'cydoor-sites'          => true,
        'doubleclick-sites'     => true,
        'ecard-scam-sites'      => true,
        'extreme-dm-sites'      => true,
        'fastclick-sites'       => true,
        'hijack-sites'          => true,
        'hitbox-sites'          => true,
        'intellitxt-sites'      => true,
        'ivw-sites'             => true,
        'malware-sites'         => true,
        'maybe-ads'             => true,
        'maybe-spy'             => false,
        'popup-traps'           => true,
        'realmedia-sites'       => true,
        'red-sheriff-sites'     => true,
        'shock-sites'           => false,
        'spyware-sites'         => true,
        'wiki-spam-sites'       => true,
        'yahoo-ad-sites'        => true,
    }
}


OptionParser.new do |opts|
    opts.banner = "Usage: #{File.basename($0)} [options]"

    opts.on("--file FILENAME", "Output file name (default: #{@opt[:file]||'stdout'})") do |f|
        @opt[:file] = f
    end

    opts.on("--address ADDR", "IPv4 address to resolve the hosts to (default: #{@opt[:address]})") do |a|
        @opt[:address] = a
    end

    opts.on("--v6address ADDR", "IPv6 address to resolve the hosts to (default: #{@opt[:v6address]})") do |a|
        @opt[:v6address] = a
    end

    opts.on_tail("-h", "--help", "Show help") do
        puts opts
        exit
    end
end.parse!


def valid_host(host)
    !host.nil? && host.length>0 && /[^[[:graph:]]]/.match(host).nil?
end

# Parse Dan Pollock's ad blocking hosts list
def get_someonewhocares(filter)
    name = 'someonewhocares.org'
    uri = URI('http://someonewhocares.org/hosts/hosts')
    res = Net::HTTP.get_response(uri)

    unless res.is_a?(Net::HTTPSuccess)
        $stderr.puts "ERROR: #{name}: #{res.message}"
        return {name:name, hosts:[]}
    end

    section = nil
    sections = {}
    list = []

    res.body.each_line do |line|
        case line.chomp
        when /^\s*\#<\/(.+?)>/
            sections[$1.downcase] = list
            section = nil
            list = []
        when /^\s*\#<(.+?)>/
            section = $1.downcase
        when /^\s*([^\#]+?)\s*(\#.*)?$/
            f = $1.split(/\s+/, 2)
            list.push(f[1].downcase) if section && f.length==2 && valid_host(f[1])
        end
    end

    {name:name, hosts:sections.select {|s| filter[s]}.values.flatten}
end

# Parse Peter Lowe's ad blocking hosts list
def get_yoyo(options)
    name = 'pgl.yoyo.org'
    uri = URI('http://pgl.yoyo.org/adservers/serverlist.php')
    uri.query = URI.encode_www_form({hostformat:'hosts', showintro:'0', mimetype:'plaintext'})
    res = Net::HTTP.get_response(uri)

    unless res.is_a?(Net::HTTPSuccess)
        $stderr.puts "ERROR: #{name}: #{res.message}"
        return {name:name, hosts:[]}
    end

    {name:name, hosts:res.body.each_line.map do |line|
        case line.chomp
        when /^\s*([^\#]+?)\s*(\#.*)?$/
            f = $1.split(/\s+/, 2)
            if f.length==2 && valid_host(f[1]) then f[1].downcase else nil end
        end
    end.compact}
end

hosts = [
            get_someonewhocares(@opt[:someonewhocares_filter]),
            get_yoyo(@opt),
        ].flat_map do |list|
            $stderr.puts("INFO: #{list[:name]}: #{list[:hosts].length} entries")
            list[:hosts]
        end.sort.uniq
$stderr.puts("INFO: Combined hosts list: #{hosts.length} entries")

begin
    f = if @opt[:file] then File.open(@opt[:file], 'w') else $stdout end

    f.puts("server:")
    hosts.each do |host|
        f.puts("  local-zone: \"#{host}\" redirect")
        f.puts("  local-data: \"#{host} A #{@opt[:address]}\"")
        f.puts("  local-data: \"#{host} AAAA #{@opt[:v6address]}\"")
    end
rescue => ex
    $stderr.puts("ERROR: #{ex}")
ensure
    f.close unless f==$stdout
end

exit(0)

# vim: sw=4 ts=4 et:
